import os
from datetime import datetime


class ReportGenerator:
    @staticmethod
    def _generate_raw_data(company_name: str, competitor: str, sentiment: str, metrics: str):
        """Generate raw text data format"""
        return f"""PRODUCT INTELLIGENCE RAW DATA EXPORT
=================================
Company: {company_name}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

1. COMPETITOR ANALYSIS
--------------------
{competitor}

2. MARKET SENTIMENT
-----------------
{sentiment}

3. PERFORMANCE METRICS
-------------------
{metrics}

Generated by AI Product Intelligence Platform
Confidential - For internal use only
"""

    @staticmethod
    def _generate_html_report(company_name: str, competitor: str, sentiment: str, metrics: str):
        """Generate formatted HTML report with styles"""
        return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Product Intelligence Report - {company_name}</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 40px;
            line-height: 1.6;
            background-color: #f8f9fa;
            color: #212529;
        }}
        h1 {{
            color: #0d6efd;
            border-bottom: 2px solid #0d6efd;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #198754;
            margin-top: 30px;
        }}
        .section {{
            margin-bottom: 25px;
            padding: 20px;
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .footer {{
            margin-top: 40px;
            font-size: 0.9em;
            color: #6c757d;
        }}
    </style>
</head>
<body>
    <h1>Product Intelligence Report</h1>
    <p><strong>Company:</strong> {company_name}</p>
    <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>

    <div class="section">
        <h2>Competitor Analysis</h2>
        <p>{competitor}</p>
    </div>

    <div class="section">
        <h2>Market Sentiment</h2>
        <p>{sentiment}</p>
    </div>

    <div class="section">
        <h2>Performance Metrics</h2>
        <p>{metrics}</p>
    </div>

    <div class="footer">
        <p>Generated by AI Product Intelligence Platform</p>
        <p>Confidential - For internal use only</p>
    </div>
</body>
</html>"""

    @staticmethod
    def save_reports(company_name: str, competitor: str, sentiment: str, metrics: str, output_dir="reports"):
        """Save reports in both text and HTML formats"""
        os.makedirs(output_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        # Generate content
        raw_data = ReportGenerator._generate_raw_data(company_name, competitor, sentiment, metrics)
        html_report = ReportGenerator._generate_html_report(company_name, competitor, sentiment, metrics)

        # File paths
        text_path = os.path.join(output_dir, f"{company_name}_report_{timestamp}.txt")
        html_path = os.path.join(output_dir, f"{company_name}_report_{timestamp}.html")

        # Save files
        with open(text_path, "w", encoding="utf-8") as f:
            f.write(raw_data)

        with open(html_path, "w", encoding="utf-8") as f:
            f.write(html_report)

        return text_path, html_path
